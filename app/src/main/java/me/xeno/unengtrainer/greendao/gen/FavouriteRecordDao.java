package me.xeno.unengtrainer.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import me.xeno.unengtrainer.model.entity.FavouriteRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FAVOURITE_RECORD".
*/
public class FavouriteRecordDao extends AbstractDao<FavouriteRecord, Long> {

    public static final String TABLENAME = "FAVOURITE_RECORD";

    /**
     * Properties of entity FavouriteRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property CreateTime = new Property(2, String.class, "createTime", false, "CREATE_TIME");
        public final static Property ModifyTime = new Property(3, String.class, "modifyTime", false, "MODIFY_TIME");
        public final static Property SwingAngle = new Property(4, double.class, "swingAngle", false, "SWING_ANGLE");
        public final static Property ElevationAngle = new Property(5, double.class, "elevationAngle", false, "ELEVATION_ANGLE");
        public final static Property LeftMotorSpeed = new Property(6, float.class, "leftMotorSpeed", false, "LEFT_MOTOR_SPEED");
        public final static Property RightMotorSpeed = new Property(7, float.class, "rightMotorSpeed", false, "RIGHT_MOTOR_SPEED");
        public final static Property Checked = new Property(8, boolean.class, "checked", false, "CHECKED");
    }


    public FavouriteRecordDao(DaoConfig config) {
        super(config);
    }
    
    public FavouriteRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FAVOURITE_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"CREATE_TIME\" TEXT," + // 2: createTime
                "\"MODIFY_TIME\" TEXT," + // 3: modifyTime
                "\"SWING_ANGLE\" REAL NOT NULL ," + // 4: swingAngle
                "\"ELEVATION_ANGLE\" REAL NOT NULL ," + // 5: elevationAngle
                "\"LEFT_MOTOR_SPEED\" REAL NOT NULL ," + // 6: leftMotorSpeed
                "\"RIGHT_MOTOR_SPEED\" REAL NOT NULL ," + // 7: rightMotorSpeed
                "\"CHECKED\" INTEGER NOT NULL );"); // 8: checked
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FAVOURITE_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FavouriteRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(3, createTime);
        }
 
        String modifyTime = entity.getModifyTime();
        if (modifyTime != null) {
            stmt.bindString(4, modifyTime);
        }
        stmt.bindDouble(5, entity.getSwingAngle());
        stmt.bindDouble(6, entity.getElevationAngle());
        stmt.bindDouble(7, entity.getLeftMotorSpeed());
        stmt.bindDouble(8, entity.getRightMotorSpeed());
        stmt.bindLong(9, entity.getChecked() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FavouriteRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(3, createTime);
        }
 
        String modifyTime = entity.getModifyTime();
        if (modifyTime != null) {
            stmt.bindString(4, modifyTime);
        }
        stmt.bindDouble(5, entity.getSwingAngle());
        stmt.bindDouble(6, entity.getElevationAngle());
        stmt.bindDouble(7, entity.getLeftMotorSpeed());
        stmt.bindDouble(8, entity.getRightMotorSpeed());
        stmt.bindLong(9, entity.getChecked() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FavouriteRecord readEntity(Cursor cursor, int offset) {
        FavouriteRecord entity = new FavouriteRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // createTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // modifyTime
            cursor.getDouble(offset + 4), // swingAngle
            cursor.getDouble(offset + 5), // elevationAngle
            cursor.getFloat(offset + 6), // leftMotorSpeed
            cursor.getFloat(offset + 7), // rightMotorSpeed
            cursor.getShort(offset + 8) != 0 // checked
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FavouriteRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreateTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setModifyTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSwingAngle(cursor.getDouble(offset + 4));
        entity.setElevationAngle(cursor.getDouble(offset + 5));
        entity.setLeftMotorSpeed(cursor.getFloat(offset + 6));
        entity.setRightMotorSpeed(cursor.getFloat(offset + 7));
        entity.setChecked(cursor.getShort(offset + 8) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FavouriteRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FavouriteRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FavouriteRecord entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
